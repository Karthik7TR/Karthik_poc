<?xml version="1.0"?>
<!DOCTYPE xml>
<project name="ebookGatherer_Compile_Script" default="normal_build" basedir="..\">
	
  <property environment="env" />
  <property file="ant/ant-global.properties" />
  <property name="IsCoverageBuild" value="false"/>
  <property name="DisplayCopiedFilesInWar" value="true"/>
  <property name="warFilename" value="eBookGatherer.war"/>
	
  <!--- - - - - - - - - - - - - - - - -
           Create the master class path that will be used by all targets in the script. 
          - - - - - - - - - - - - - - - - - -->
  <path id="classpath.compile">
    <fileset dir="${dir.core}/lib">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${dir.core}/dist">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${dir.webContent}/WEB-INF/lib">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${env.buildextensionroot}">
      <include name="JUnit/*.jar"/>
      <include name="OtherLibraries/**/*.jar"/>
    </fileset>
  </path>

  <!-- =================================
          target: normal_build
          description: This is the entry target for a "normal" build. It will compile the main source 
                       code and the unit tests. Integration tests will not be compiled since 
                       it is part of the coverage build. 
         ================================= -->
  <target name="normal_build" description="Normal build for the ebookGatherer project" depends="-init, -compile-core, -compile, -createWar, -compile_unitTests">
    <echo level="info" message="Normal (aka Non-Coverage) build has completed." />
  </target>

  <!-- =================================
          target: coverage_build
          description: This is the entry target for a "coverage" build. It will compile the
                       main source code, unit tests and integration tests.
         ================================= -->
  <target name="coverage_build" description="Coverage build for the ebookGatherer project" depends="-init, -compile-core,-compile, -createWar, -compile_unitTests, -compile_integrationTests">
    <echo level="info" message="Coverage build has completed." />
  </target>

  <!-- - - - - - - - - - - - - - - - - -
          target: -init
          description: Perform all initialization tasks like cleaning up old compiled code, 
                       create directories that do not exist, etc.
         - - - - - - - - - - - - - - - - - -->
  <target name="-init">
    <echo level="verbose">Deleting old compiled binaries, if existing...</echo>
    <delete dir="${dir.binaries}/com" failonerror="false" includeemptydirs="true"/>
    <delete dir="${dir.testBinaries}" failonerror="false" includeemptydirs="true"/>
    <delete dir="${dir.tmpDirBinaries}/com" failonerror="false" includeemptydirs="true"/>

    <echo level="verbose">Creating directories for the compiled binaries - '${dir.binaries}', '${dir.testBinaries}' and '${dir.integrationTestBinaries}'...</echo>
    <mkdir dir="${dir.binaries}"/>
    <mkdir dir="${dir.testBinaries}"/>
    <mkdir dir="${dir.integrationTestBinaries}" />
    <mkdir dir="${dir.tmpBuildDir}"/>
    <mkdir dir="${dir.tmpBuildDir}/WEB-INF"/>
    <mkdir dir="${dir.tmpDirBinaries}"/>
    <mkdir dir="${dir.tmpDirBinaries}/com"/>
    <mkdir dir="${dir.tmpBuildDir}/WEB-INF/lib"/>
    
    <!-- Save cache version and build number to a file -->
    <xslt in="WebContent/Manifest.xml" out="${dir.tmpBuildDir}/build.properties" style="${dir.core}/ant/ManifestProperties.xsl" />
    <echo append="true" file="${dir.tmpBuildDir}/build.properties">build.number=${BuildNumber}${line.separator}</echo>
    <property file="${dir.tmpBuildDir}/build.properties" />

  </target>

  <!-- - - - - - - - - - - - - - - - - - 
           target: -compile                      
           description: Compile the source code and place the compiled libraries in the respective 
                        folder. The code will be compiled using version 1.6 of the SDK.
         - - - - - - - - - - - - - - - - - -->
  <target name="-compile" depends="-compile-core">
    <echo level="verbose">Compiling the source code...</echo>
    <javac destdir="${dir.tmpDirBinaries}" source="1.7" target="1.7"
           debug="true" includeantruntime="false" encoding="UTF-8">
      <src path="${dir.source}"/>
      <classpath refid="classpath.compile"/>
    </javac>
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
        target: -compile-core                   
        description: Compile helper project
    - - - - - - - - - - - - - - - - - -->
  <target name="-compile-core">
    <ant dir="${dir.core}" antfile="ant/CompileAntScript.xml" target="normal_build" inheritAll="false"/>
    <copy file="${dir.core}/dist/ebookGeneratorCore.jar" todir="${dir.tmpBuildDir}/WEB-INF/lib"/>

    <!-- copy core lib jars-->
    <copy todir="${dir.tmpBuildDir}/WEB-INF/lib">
      <fileset dir="${dir.core}/lib">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>
  
  <!-- - - - - - - - - - - - - - - - - - 
          target: -compile_unitTests                      
          description: Compile the unit test source code and place the compiled libraries in the 
                       respective binary folder. The code will be compiled using version 1.6 of the SDK.
         - - - - - - - - - - - - - - - - - -->
  <target name="-compile_unitTests">
    <echo level="verbose">Compiling the unit test source code...</echo>
    <javac destdir="${dir.testBinaries}" source="1.7" target="1.7" includeantruntime="false" encoding="UTF-8">
      <src path="${dir.unitTestSource}"/>
      <classpath>
        <pathelement path="${dir.binaries}"/>
        <pathelement path="${dir.tmpDirBinaries}"/>
        <pathelement path="${dir.tmpBuildDir}/WEB-INF/lib"/>
        <path refid="classpath.compile"/>
      </classpath>
    </javac>

    <copy todir="${dir.testBinaries}">
      <fileset dir="${dir.core}/testBin">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="${dir.core}/srctest">
        <include name="**/*.xml"/>
      </fileset>
    </copy>
    
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: -compile_integrationTests                      
          description: Compile the integration test source code and place the compiled libraries in the 
                       respective binary folder. The code will be compiled using version 1.6 of the SDK.
         - - - - - - - - - - - - - - - - - -->
  <target name="-compile_integrationTests">
    <echo level="verbose">Compiling the integration test source code...</echo>
    <javac destdir="${dir.integrationTestBinaries}" source="1.7" target="1.7" includeantruntime="false" encoding="UTF-8">
      <src path="${dir.integrationTestSource}"/>
      <classpath>
        <pathelement path="${dir.binaries}"/>
        <pathelement path="${dir.tmpDirBinaries}"/>
        <path refid="classpath.compile"/>
      </classpath>
    </javac>
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: -createJar                      
          description: Package the compiled code into a JAR.
         - - - - - - - - - - - - - - - - - -->
  <target name="-createJar" >
    <echo level="verbose">Packaging the code into a JAR file...</echo>
    <jar jarfile="${path.jarFile}"
         manifest="${dir.webContent}\META-INF\MANIFEST.MF">
      <fileset dir="${dir.binaries}" casesensitive="yes">
        <exclude name="**/*.java"/>
      </fileset>
    </jar>
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: -createWar                      
          description: Package the compiled code into a WAR file, so that it can be deployed.
         - - - - - - - - - - - - - - - - - -->
  <target name="-createWar" depends="-createJar">
    <echo level="verbose">Creating the WAR file...</echo>

    <!-- copy webContent/WEB-INF to tmpBuildDir before war creation -->
    <copy todir="${dir.tmpBuildDir}" overwrite="true">
      <fileset dir="${dir.webContent}"/>
    </copy>

    <war destfile="${dir.binaries}/${warFilename}" manifest="${dir.webContent}/META-INF/MANIFEST.MF">
      <fileset dir="${dir.tmpBuildDir}">
        <exclude name="**/${jarFilename}/**"/>
      </fileset>
      <classes file="${dir.source}/log4j2.xml"/>  	
    </war>
     
  </target>
</project>