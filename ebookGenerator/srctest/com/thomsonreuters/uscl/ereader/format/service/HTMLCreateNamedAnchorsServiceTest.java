package com.thomsonreuters.uscl.ereader.format.service;

import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FileOutputStream;
import java.util.LinkedHashSet;
import java.util.Set;

import com.thomsonreuters.uscl.ereader.format.exception.EBookFormatException;
import com.thomsonreuters.uscl.ereader.gather.metadata.domain.DocMetadata;
import com.thomsonreuters.uscl.ereader.gather.metadata.domain.DocumentMetadataAuthority;
import com.thomsonreuters.uscl.ereader.gather.metadata.service.DocMetadataServiceImpl;
import com.thomsonreuters.uscl.ereader.ioutil.FileHandlingHelper;
import org.apache.commons.io.FileUtils;
import org.easymock.EasyMock;
import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

/**
 * JUnit test for HTMLCreateNamedAnchorsServiceImpl.java
 *
 * @author <a href="mailto:zack.farrell@thomsonreuters.com">Zack Farrell</a> uc209819
 */
@Ignore
public final class HTMLCreateNamedAnchorsServiceTest
{
    private HTMLCreateNamedAnchorsServiceImpl AnchorsService;
    private File tempRootDir; // root directory for all test files

    /* arguments */
    private File srcDir; // input, contains .transformed files
    private File targetDir;
    private String title;
    private Long jobId;
    private File docToTocMap;

    /* service mocks and return values */
    private DocMetadataServiceImpl metadataMoc;
    private DocMetadata docMeta;
    private DocumentMetadataAuthority docMetaAuthority;

    /**
     * makeFile( File directory, String name, String content ) helper method to streamline file creation
     *
     * @param directory Location the new file will be created in
     * @param name Name of the new file
     * @param content Content to be written into the new file
     * @return returns a File object directing to the new file returns null if any errors occur
     */
    private File makeFile(final File directory, final String name, final String content)
    {
        try
        {
            final File file = new File(directory, name);
            file.createNewFile();
            final FileOutputStream out = new FileOutputStream(file);
            out.write(content.getBytes());
            out.flush();
            out.close();
            return file;
        }
        catch (final Exception e)
        {
            return null;
        }
    }

    @Before
    public void setUp()
    {
        AnchorsService = new HTMLCreateNamedAnchorsServiceImpl();

        tempRootDir = new File(System.getProperty("java.io.tmpdir") + "/EvenMoreTemp");
        tempRootDir.mkdir();

        /* initialize arguments */
        srcDir = new File("srctest/com/thomsonreuters/uscl/ereader/format/service/staticContent");
        targetDir = new File(tempRootDir.getAbsolutePath(), "PostTransformDirectory");
        targetDir.mkdir();
        title = "ebook_source_test";
        jobId = Long.valueOf(127);
        docToTocMap = null;

        /* service mocks and return values */
        AnchorsService.setfileHandlingHelper(new FileHandlingHelper());
        metadataMoc = EasyMock.createMock(DocMetadataServiceImpl.class);
        AnchorsService.setdocMetadataService(metadataMoc);

        final Set<DocMetadata> docMetadataSet = new LinkedHashSet<>();
        docMetaAuthority = new DocumentMetadataAuthority(docMetadataSet);

        docMeta = new DocMetadata();
        docMeta.setTitleId(title);
        docMeta.setProviewFamilyUUIDDedup(Integer.valueOf(1));
        docMeta.setDocFamilyUuid("hello test!");
        docMeta.setJobInstanceId(jobId);
        docMeta.setDocUuid(title);
        docMeta.setCollectionName("test");
    }

    @After
    public void tearDown() throws Exception
    {
        /* recursively deletes the root directory, and all its subdirectories and files */
        FileUtils.deleteDirectory(tempRootDir);
    }

    /**
     * TransformHTML should take a source directory with ".posttransform" files generated by HTMLTransformerService and
     * perform the fourth step necessary to transform them into html files. The resulting ".postanchor" files are
     * created in the target directory
     */
    @Test
    public void testTransformerServiceHappyPath()
    {
        int numDocs = -1;
        boolean thrown = false;

        final File anchorTargetFile = makeFile(srcDir, "anchorTargetFile", "guids1,guids2,guids3\n");
        docToTocMap = makeFile(srcDir, "TOCmap.xml", "ebook_source_test,doc\n");

        try
        {
            EasyMock.expect(metadataMoc.findAllDocMetadataForTitleByJobId(jobId)).andReturn(docMetaAuthority);
            EasyMock.expect(metadataMoc.findDocMetadataByPrimaryKey(title, jobId, title)).andReturn(docMeta).times(2);
            EasyMock.replay(metadataMoc);

            numDocs = AnchorsService.transformHTML(srcDir, targetDir, title, jobId, docToTocMap);
        }
        catch (final Exception e)
        {
            // e.printStackTrace();
            thrown = true;
        }
        finally
        {
            FileUtils.deleteQuietly(docToTocMap);
            FileUtils.deleteQuietly(anchorTargetFile);
        }
        assertTrue(!thrown);
        assertTrue(numDocs == 1);

        final File outFile = new File(targetDir.getAbsolutePath(), "ebook_source_test.postanchor");
        assertTrue(outFile.exists());
    }

    /**
     * test alternative logical branches not taken by the happy path, including a given document to Table of Contents
     * map file.
     */
    @Test
    public void testDocToTocMapping()
    {
        int numDocs = -1;
        boolean thrown = false;

        FileUtils.deleteQuietly(targetDir);
        docToTocMap = makeFile(srcDir, "TOCmap.xml", "ebook_source_test,doc\n");
        docMeta = null;

        final File anchorTargetFile = makeFile(srcDir, "anchorTargetFile", "guids1,guids2,guids3\n");

        try
        {
            EasyMock.expect(metadataMoc.findAllDocMetadataForTitleByJobId(jobId)).andReturn(docMetaAuthority);
            EasyMock.expect(metadataMoc.findDocMetadataByPrimaryKey(title, jobId, title)).andReturn(docMeta).times(2);
            EasyMock.replay(metadataMoc);

            numDocs = AnchorsService.transformHTML(srcDir, targetDir, title, jobId, docToTocMap);
        }
        catch (final Exception e)
        {
            // e.printStackTrace();
            thrown = true;
        }
        finally
        {
            FileUtils.deleteQuietly(anchorTargetFile);
            FileUtils.deleteQuietly(docToTocMap);
        }
        assertTrue(!thrown);
        assertTrue(numDocs == 1);

        final File outFile = new File(targetDir.getAbsolutePath(), "ebook_source_test.postanchor");
        assertTrue(outFile.exists());
    }

    /**
     * test the processing of document metadata associated with documentMetadataAuthority
     */
    @Test
    public void testDocumentMetadata()
    {
        int numDocs = -1;
        boolean thrown = false;

        final Set<DocMetadata> docMetadataSet = new LinkedHashSet<>();
        docMetadataSet.add(docMeta);
        docMetaAuthority = new DocumentMetadataAuthority(docMetadataSet);

        try
        {
            EasyMock.expect(metadataMoc.findAllDocMetadataForTitleByJobId(jobId)).andReturn(docMetaAuthority);
            EasyMock.expect(metadataMoc.findDocMetadataByPrimaryKey(title, jobId, title)).andReturn(docMeta).times(2);
            EasyMock.replay(metadataMoc);

            numDocs = AnchorsService.transformHTML(srcDir, targetDir, title, jobId, docToTocMap);
        }
        catch (final Exception e)
        {
            // e.printStackTrace();
            thrown = true;
        }
        assertTrue(!thrown);
        assertTrue(numDocs == 1);

        final File outFile = new File(targetDir.getAbsolutePath(), "ebook_source_test.postanchor");
        assertTrue(outFile.exists());
    }

    /**
     * Test the exception throwing of HTMLCreateNamedAnchrosService as a response to a source directory that is null or
     * contains no .posttransform files
     */
    @Test
    public void testExceptions()
    {
        boolean expect = false;
        boolean thrown = false;

        try
        {
            AnchorsService.transformHTML(null, targetDir, title, jobId, docToTocMap);
        }
        catch (final IllegalArgumentException e)
        {
            // e.printStackTrace();
            expect = true;
        }
        catch (final Exception e)
        {
            // e.printStackTrace();
            thrown = true;
        }
        assertTrue(expect);
        assertTrue(!thrown);

        expect = false;
        thrown = false;

        try
        {
            AnchorsService.transformHTML(targetDir, targetDir, title, jobId, docToTocMap);
        }
        catch (final EBookFormatException e)
        {
            // e.printStackTrace();
            expect = true;
        }
        catch (final Exception e)
        {
            // e.printStackTrace();
            thrown = true;
        }
        assertTrue(expect);
        assertTrue(!thrown);
    }

    /**
     * Test the exception throwing of HTMLCreateNamedAnchrosService as a response to a source directory that is null or
     * contains no .posttransform files
     */
    @Test
    public void testreadTocAnchorListException()
    {
        boolean expect = false;
        boolean thrown = false;

        final File anchorTargetFile = makeFile(srcDir, "anchorTargetFile", "guids1,guids2,guids3\n");
        docToTocMap = makeFile(srcDir, "TOCmap.xml", ",");

        try
        {
            EasyMock.expect(metadataMoc.findAllDocMetadataForTitleByJobId(jobId)).andReturn(docMetaAuthority);
            EasyMock.expect(metadataMoc.findDocMetadataByPrimaryKey(title, jobId, title)).andReturn(docMeta).times(2);
            EasyMock.replay(metadataMoc);

            AnchorsService.transformHTML(srcDir, targetDir, title, jobId, docToTocMap);
        }
        catch (final EBookFormatException e)
        {
            // e.printStackTrace();
            expect = true;
        }
        catch (final Exception e)
        {
            // e.printStackTrace();
            thrown = true;
        }
        finally
        {
            FileUtils.deleteQuietly(anchorTargetFile);
            FileUtils.deleteQuietly(docToTocMap);
        }
        assertTrue(expect);
        assertTrue(!thrown);
    }

    /**
     * Test the exception throwing in the processing of the anchor target file
     */
    @Test
    public void testreadAnchorTargetFileException()
    {
        boolean expect = false;
        boolean thrown = false;

        final File anchorTargetFile = makeFile(srcDir, "anchorTargetFile", ",");

        try
        {
            EasyMock.expect(metadataMoc.findAllDocMetadataForTitleByJobId(jobId)).andReturn(docMetaAuthority);
            EasyMock.expect(metadataMoc.findDocMetadataByPrimaryKey(title, jobId, title)).andReturn(docMeta).times(2);
            EasyMock.replay(metadataMoc);

            AnchorsService.transformHTML(srcDir, targetDir, title, jobId, docToTocMap);
        }
        catch (final EBookFormatException e)
        {
            // e.printStackTrace();
            expect = true;
        }
        catch (final Exception e)
        {
            // e.printStackTrace();
            thrown = true;
        }
        finally
        {
            FileUtils.deleteQuietly(anchorTargetFile);
        }
        assertTrue(expect);
        assertTrue(!thrown);
    }
}
