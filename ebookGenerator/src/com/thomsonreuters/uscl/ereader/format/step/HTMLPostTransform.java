package com.thomsonreuters.uscl.ereader.format.step;

import java.io.File;
import java.util.List;

import com.thomsonreuters.uscl.ereader.JobExecutionKey;
import com.thomsonreuters.uscl.ereader.JobParameterKey;
import com.thomsonreuters.uscl.ereader.StatsUpdateTypeEnum;
import com.thomsonreuters.uscl.ereader.core.book.domain.BookDefinition;
import com.thomsonreuters.uscl.ereader.core.book.domain.TableViewer;
import com.thomsonreuters.uscl.ereader.format.exception.EBookFormatException;
import com.thomsonreuters.uscl.ereader.format.service.HTMLTransformerService;
import com.thomsonreuters.uscl.ereader.orchestrate.core.tasklet.AbstractSbTasklet;
import com.thomsonreuters.uscl.ereader.stats.domain.PublishingStats;
import com.thomsonreuters.uscl.ereader.stats.service.PublishingStatsService;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobInstance;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.beans.factory.annotation.Required;

/**
 * This step transforms the HTML generated by the transformation process into ProView acceptable HTML.
 *
 * @author <a href="mailto:Selvedin.Alic@thomsonreuters.com">Selvedin Alic</a> u0095869
 */
public class HTMLPostTransform extends AbstractSbTasklet {
    //TODO: Use logger API to get Logger instance to job-specific appender.
    private static final Logger LOG = LogManager.getLogger(HTMLPostTransform.class);
    private HTMLTransformerService transformerService;
    private PublishingStatsService publishingStatsService;

    public void settransformerService(final HTMLTransformerService transformerService) {
        this.transformerService = transformerService;
    }

    @Override
    public ExitStatus executeStep(final StepContribution contribution, final ChunkContext chunkContext)
        throws Exception {
        final ExecutionContext jobExecutionContext = getJobExecutionContext(chunkContext);
        final JobInstance jobInstance = getJobInstance(chunkContext);

        final BookDefinition bookDefinition =
            (BookDefinition) jobExecutionContext.get(JobExecutionKey.EBOOK_DEFINITION);

        final String titleId = bookDefinition.getTitleId();
        final Long jobId = jobInstance.getId();
        final JobParameters jobParams = getJobParameters(chunkContext);

        final String version = jobParams.getString(JobParameterKey.BOOK_VERSION_SUBMITTED);
        final String transformDirectory =
            getRequiredStringProperty(jobExecutionContext, JobExecutionKey.FORMAT_TRANSFORMED_DIR);
        final String postTransformDirectory =
            getRequiredStringProperty(jobExecutionContext, JobExecutionKey.FORMAT_POST_TRANSFORM_DIR);
        final String staticImagePath =
            getRequiredStringProperty(jobExecutionContext, JobExecutionKey.IMAGE_STATIC_MANIFEST_FILE);
        final String docsGuid = getRequiredStringProperty(jobExecutionContext, JobExecutionKey.DOCS_DYNAMIC_GUIDS_FILE);

        final String deDupping = getRequiredStringProperty(jobExecutionContext, JobExecutionKey.DEDUPPING_FILE);

        final int numDocsInTOC = getRequiredIntProperty(jobExecutionContext, JobExecutionKey.EBOOK_STATS_DOC_COUNT);

        final List<TableViewer> tableViewers = bookDefinition.getTableViewers();

        final File transformDir = new File(transformDirectory);
        final File postTransformDir = new File(postTransformDirectory);
        final File staticImgFile = new File(staticImagePath);
        final File docsGuidFile = new File(docsGuid);
        final File deDuppingFile = new File(deDupping);

        final PublishingStats jobstats = new PublishingStats();
        jobstats.setJobInstanceId(jobId);
        String stepStatus = "Completed";

        try {
            final long startTime = System.currentTimeMillis();
            final int numDocsTransformed = transformerService.transformHTML(
                transformDir,
                postTransformDir,
                staticImgFile,
                tableViewers,
                titleId,
                jobId,
                null,
                docsGuidFile,
                deDuppingFile,
                bookDefinition.isInsStyleFlag(),
                bookDefinition.isDelStyleFlag(),
                bookDefinition.isRemoveEditorNoteHeadFlag(),
                version);
            final long endTime = System.currentTimeMillis();
            final long elapsedTime = endTime - startTime;

            if (numDocsTransformed != numDocsInTOC) {
                final String message = "The number of post transformed documents did not match the number "
                    + "of documents retrieved from the eBook TOC. Transformed "
                    + numDocsTransformed
                    + " documents while the eBook TOC had "
                    + numDocsInTOC
                    + " documents.";
                LOG.error(message);
                throw new EBookFormatException(message);
            }

            LOG.debug("Transformed " + numDocsTransformed + " HTML files in " + elapsedTime + " milliseconds");
        } catch (final Exception e) {
            stepStatus = "Failed";
            throw e;
        } finally {
            jobstats.setPublishStatus("formatHTMLTransformer : " + stepStatus);
            publishingStatsService.updatePublishingStats(jobstats, StatsUpdateTypeEnum.GENERAL);
        }

        return ExitStatus.COMPLETED;
    }

    @Required
    public void setPublishingStatsService(final PublishingStatsService publishingStatsService) {
        this.publishingStatsService = publishingStatsService;
    }
}
