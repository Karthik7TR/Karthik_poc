<beans xmlns="http://www.springframework.org/schema/beans"
 	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:sec="http://www.springframework.org/schema/security"
  	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  	   xsi:schemaLocation="http://www.springframework.org/schema/beans
  	   					   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
						   http://www.springframework.org/schema/security
						   http://www.springframework.org/schema/security/spring-security-3.2.xsd">

  	<!-- Filter used to find a user by username in the LDAP directory tree. -->
	<bean id="ldsLdapUserSearchFilter" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch"
		  p:searchTimeLimit="15000">
  		<constructor-arg index="0" value=""/>
  		<constructor-arg index="1" value="(cn={0})"/>
  		<constructor-arg index="2" ref="ldsLdapContextSource" />
	</bean>
	<bean id="tenLdapUserSearchFilter" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch"
		  p:searchTimeLimit="15000">
  		<constructor-arg index="0" value=""/>
  		<constructor-arg index="1" value="(cn={0})"/>
  		<constructor-arg index="2" ref="tenLdapContextSource" />
	</bean>
	<bean id="tlrLdapUserSearchFilter" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch"
		  p:searchTimeLimit="15000">
  		<constructor-arg index="0" value=""/>
  		<constructor-arg index="1" value="(cn={0})"/>
  		<constructor-arg index="2" ref="tlrLdapContextSource" />
	</bean>
	
	<!-- LDAP Authentication Provider, comprised of authentication operation,
		 followed by fetching user details for the authenticated user. -->  	
  	<bean id="ldsLdapAuthenticationProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider"
  		  p:userDetailsContextMapper-ref="userDetailsContextMapper">
  		<constructor-arg>
			<!-- Perform the LDAP bind authentication by checking that the provided credentials can log in to the directory server. -->
			<bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
				<constructor-arg ref="ldsLdapContextSource"/>
				<property name="userSearch" ref="ldsLdapUserSearchFilter"/>
			</bean>
  		</constructor-arg>
     </bean>
     <bean id="tenLdapAuthenticationProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider"
  		  p:userDetailsContextMapper-ref="userDetailsContextMapper">
  		<constructor-arg>
			<!-- Perform the LDAP bind authentication by checking that the provided credentials can log in to the directory server. -->
			<bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
				<constructor-arg ref="tenLdapContextSource"/>
				<property name="userSearch" ref="tenLdapUserSearchFilter"/>
			</bean>
  		</constructor-arg>
     </bean>
     <bean id="tlrLdapAuthenticationProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider"
  		  p:userDetailsContextMapper-ref="userDetailsContextMapper">
  		<constructor-arg>
			<!-- Perform the LDAP bind authentication by checking that the provided credentials can log in to the directory server. -->
			<bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
				<constructor-arg ref="tlrLdapContextSource"/>
				<property name="userSearch" ref="tlrLdapUserSearchFilter"/>
			</bean>
  		</constructor-arg>
     </bean>
     
	<!--  TESTING ONLY - NOT FOR PRODUCTION -->
	<bean id="testingUserDetailsService" class="com.thomsonreuters.uscl.ereader.mgr.security.TestingUserDetailsService"/>
	<bean id="testingAuthenticationProvider" class="com.thomsonreuters.uscl.ereader.mgr.security.TestingAuthenticationProvider"
		  p:environmentName-ref="environmentName"
	  	  p:userDetailsService-ref="testingUserDetailsService"/>
	
  	<sec:authentication-manager alias="authenticationManager">
  		<sec:authentication-provider ref="ldsLdapAuthenticationProvider"/>
  		<!-- <sec:authentication-provider ref="tenLdapAuthenticationProvider"/>
  		<sec:authentication-provider ref="tlrLdapAuthenticationProvider"/>  -->
		<sec:authentication-provider ref="testingAuthenticationProvider"/> <!--  TESTING ONLY - NOT FOR PRODUCTION -->
  	</sec:authentication-manager>
	
	<sec:http use-expressions="true" access-denied-page="/accessDenied.mvc">
		<!-- Authentication - form based -->
		<sec:form-login login-page="/login.mvc" 
						default-target-url="/afterAuthentication.mvc"
						always-use-default-target="true"  
						authentication-failure-url="/loginFail.mvc"/>
						
		<!-- Access Control - URL based -->
		<sec:intercept-url pattern="/js/**" access="permitAll"/>
		<sec:intercept-url pattern="/theme/**" access="permitAll"/>
		<sec:intercept-url pattern="/service/**" access="permitAll"/>	<!-- Allow all REST service operation requests (sync service in particular) -->
		<sec:intercept-url pattern="/smokeTest.mvc" access="permitAll"/>
		<sec:intercept-url pattern="/login.mvc" access="permitAll"/>
		<sec:intercept-url pattern="/loginFail.mvc" access="permitAll"/>
		<sec:intercept-url pattern="/accessDenied.mvc" access="permitAll"/>
		<sec:intercept-url pattern="/afterLogout.mvc" access="permitAll"/>
		<sec:intercept-url pattern="/dismissOutage.mvc" access="permitAll"/>
		
		<sec:intercept-url pattern="/bookDefinitionCreate.mvc" access="hasAnyRole('ROLE_PUBLISHER,ROLE_PUBLISHER_PLUS,ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/bookDefinitionEdit.mvc" access="hasAnyRole('ROLE_EDITOR,ROLE_PUBLISHER,ROLE_PUBLISHER_PLUS,ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/bookDefinitionCopy.mvc" access="hasAnyRole('ROLE_PUBLISHER,ROLE_PUBLISHER_PLUS,ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/bookDefinitionDelete.mvc" access="hasRole('ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/bookDefinitionRestore.mvc" access="hasRole('ROLE_SUPERUSER')"/>
		
		<sec:intercept-url pattern="/generateEbookPreview.mvc" access="hasAnyRole('ROLE_PUBLISHER,ROLE_PUBLISHER_PLUS,ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/generateBulkEbookPreview.mvc" access="hasAnyRole('ROLE_PUBLISHER,ROLE_PUBLISHER_PLUS,ROLE_SUPERUSER')"/>
		
		<sec:intercept-url pattern="/adminMain.mvc" access="hasAnyRole('ROLE_SUPPORT,ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminOutage*" access="hasAnyRole('ROLE_SUPPORT,ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminSupport*" access="hasAnyRole('ROLE_SUPPORT,ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminStartGenerator*" access="hasAnyRole('ROLE_SUPPORT,ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminStopGenerator*" access="hasAnyRole('ROLE_SUPPORT,ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminJobThrottleConfig.mvc" access="hasAnyRole('ROLE_SUPPORT,ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminJuris*" access="hasRole('ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminPublish*" access="hasRole('ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminState*" access="hasRole('ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminKeyword*" access="hasRole('ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminBookLock*" access="hasRole('ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminMisc*" access="hasRole('ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/adminAuditBook*" access="hasRole('ROLE_SUPERUSER')"/>
		
		<sec:intercept-url pattern="/proviewGroupDefinitionEdit.mvc" access="hasRole('ROLE_SUPERUSER')"/>
		
		<sec:intercept-url pattern="/proviewTitleRemove*" access="hasRole('ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/proviewTitleDelete*" access="hasRole('ROLE_SUPERUSER')"/>
		<sec:intercept-url pattern="/proviewTitlePromote*" access="hasAnyRole('ROLE_PUBLISHER_PLUS,ROLE_SUPERUSER')"/>
		
		<!-- Catch-all for all other URLs, you must at least be authenticated to the application -->
		<sec:intercept-url pattern="/**" access="isFullyAuthenticated()"/>
		
		<!-- Logout -->					
		<sec:logout logout-success-url="/afterLogout.mvc"/>
	</sec:http>
	
</beans>
